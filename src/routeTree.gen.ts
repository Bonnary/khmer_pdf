/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrganizeSplitPdfRouteImport } from './routes/organize/split-pdf'
import { Route as OrganizeRotatePdfRouteImport } from './routes/organize/rotate-pdf'
import { Route as OrganizeOrganizePdfRouteImport } from './routes/organize/organize-pdf'
import { Route as OrganizeMergePdfRouteImport } from './routes/organize/merge-pdf'
import { Route as OptimizeOcrPdfRouteImport } from './routes/optimize/ocr-pdf'
import { Route as OptimizeCompressPdfRouteImport } from './routes/optimize/compress-pdf'
import { Route as EditEditPdfRouteImport } from './routes/edit/edit-pdf'
import { Route as ConvertPdfToWordRouteImport } from './routes/convert/pdf-to-word'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizeSplitPdfRoute = OrganizeSplitPdfRouteImport.update({
  id: '/organize/split-pdf',
  path: '/organize/split-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizeRotatePdfRoute = OrganizeRotatePdfRouteImport.update({
  id: '/organize/rotate-pdf',
  path: '/organize/rotate-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizeOrganizePdfRoute = OrganizeOrganizePdfRouteImport.update({
  id: '/organize/organize-pdf',
  path: '/organize/organize-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizeMergePdfRoute = OrganizeMergePdfRouteImport.update({
  id: '/organize/merge-pdf',
  path: '/organize/merge-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const OptimizeOcrPdfRoute = OptimizeOcrPdfRouteImport.update({
  id: '/optimize/ocr-pdf',
  path: '/optimize/ocr-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const OptimizeCompressPdfRoute = OptimizeCompressPdfRouteImport.update({
  id: '/optimize/compress-pdf',
  path: '/optimize/compress-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const EditEditPdfRoute = EditEditPdfRouteImport.update({
  id: '/edit/edit-pdf',
  path: '/edit/edit-pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const ConvertPdfToWordRoute = ConvertPdfToWordRouteImport.update({
  id: '/convert/pdf-to-word',
  path: '/convert/pdf-to-word',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/convert/pdf-to-word': typeof ConvertPdfToWordRoute
  '/edit/edit-pdf': typeof EditEditPdfRoute
  '/optimize/compress-pdf': typeof OptimizeCompressPdfRoute
  '/optimize/ocr-pdf': typeof OptimizeOcrPdfRoute
  '/organize/merge-pdf': typeof OrganizeMergePdfRoute
  '/organize/organize-pdf': typeof OrganizeOrganizePdfRoute
  '/organize/rotate-pdf': typeof OrganizeRotatePdfRoute
  '/organize/split-pdf': typeof OrganizeSplitPdfRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/convert/pdf-to-word': typeof ConvertPdfToWordRoute
  '/edit/edit-pdf': typeof EditEditPdfRoute
  '/optimize/compress-pdf': typeof OptimizeCompressPdfRoute
  '/optimize/ocr-pdf': typeof OptimizeOcrPdfRoute
  '/organize/merge-pdf': typeof OrganizeMergePdfRoute
  '/organize/organize-pdf': typeof OrganizeOrganizePdfRoute
  '/organize/rotate-pdf': typeof OrganizeRotatePdfRoute
  '/organize/split-pdf': typeof OrganizeSplitPdfRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/convert/pdf-to-word': typeof ConvertPdfToWordRoute
  '/edit/edit-pdf': typeof EditEditPdfRoute
  '/optimize/compress-pdf': typeof OptimizeCompressPdfRoute
  '/optimize/ocr-pdf': typeof OptimizeOcrPdfRoute
  '/organize/merge-pdf': typeof OrganizeMergePdfRoute
  '/organize/organize-pdf': typeof OrganizeOrganizePdfRoute
  '/organize/rotate-pdf': typeof OrganizeRotatePdfRoute
  '/organize/split-pdf': typeof OrganizeSplitPdfRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/convert/pdf-to-word'
    | '/edit/edit-pdf'
    | '/optimize/compress-pdf'
    | '/optimize/ocr-pdf'
    | '/organize/merge-pdf'
    | '/organize/organize-pdf'
    | '/organize/rotate-pdf'
    | '/organize/split-pdf'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/convert/pdf-to-word'
    | '/edit/edit-pdf'
    | '/optimize/compress-pdf'
    | '/optimize/ocr-pdf'
    | '/organize/merge-pdf'
    | '/organize/organize-pdf'
    | '/organize/rotate-pdf'
    | '/organize/split-pdf'
  id:
    | '__root__'
    | '/'
    | '/convert/pdf-to-word'
    | '/edit/edit-pdf'
    | '/optimize/compress-pdf'
    | '/optimize/ocr-pdf'
    | '/organize/merge-pdf'
    | '/organize/organize-pdf'
    | '/organize/rotate-pdf'
    | '/organize/split-pdf'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConvertPdfToWordRoute: typeof ConvertPdfToWordRoute
  EditEditPdfRoute: typeof EditEditPdfRoute
  OptimizeCompressPdfRoute: typeof OptimizeCompressPdfRoute
  OptimizeOcrPdfRoute: typeof OptimizeOcrPdfRoute
  OrganizeMergePdfRoute: typeof OrganizeMergePdfRoute
  OrganizeOrganizePdfRoute: typeof OrganizeOrganizePdfRoute
  OrganizeRotatePdfRoute: typeof OrganizeRotatePdfRoute
  OrganizeSplitPdfRoute: typeof OrganizeSplitPdfRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organize/split-pdf': {
      id: '/organize/split-pdf'
      path: '/organize/split-pdf'
      fullPath: '/organize/split-pdf'
      preLoaderRoute: typeof OrganizeSplitPdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organize/rotate-pdf': {
      id: '/organize/rotate-pdf'
      path: '/organize/rotate-pdf'
      fullPath: '/organize/rotate-pdf'
      preLoaderRoute: typeof OrganizeRotatePdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organize/organize-pdf': {
      id: '/organize/organize-pdf'
      path: '/organize/organize-pdf'
      fullPath: '/organize/organize-pdf'
      preLoaderRoute: typeof OrganizeOrganizePdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organize/merge-pdf': {
      id: '/organize/merge-pdf'
      path: '/organize/merge-pdf'
      fullPath: '/organize/merge-pdf'
      preLoaderRoute: typeof OrganizeMergePdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/optimize/ocr-pdf': {
      id: '/optimize/ocr-pdf'
      path: '/optimize/ocr-pdf'
      fullPath: '/optimize/ocr-pdf'
      preLoaderRoute: typeof OptimizeOcrPdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/optimize/compress-pdf': {
      id: '/optimize/compress-pdf'
      path: '/optimize/compress-pdf'
      fullPath: '/optimize/compress-pdf'
      preLoaderRoute: typeof OptimizeCompressPdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/edit-pdf': {
      id: '/edit/edit-pdf'
      path: '/edit/edit-pdf'
      fullPath: '/edit/edit-pdf'
      preLoaderRoute: typeof EditEditPdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/convert/pdf-to-word': {
      id: '/convert/pdf-to-word'
      path: '/convert/pdf-to-word'
      fullPath: '/convert/pdf-to-word'
      preLoaderRoute: typeof ConvertPdfToWordRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConvertPdfToWordRoute: ConvertPdfToWordRoute,
  EditEditPdfRoute: EditEditPdfRoute,
  OptimizeCompressPdfRoute: OptimizeCompressPdfRoute,
  OptimizeOcrPdfRoute: OptimizeOcrPdfRoute,
  OrganizeMergePdfRoute: OrganizeMergePdfRoute,
  OrganizeOrganizePdfRoute: OrganizeOrganizePdfRoute,
  OrganizeRotatePdfRoute: OrganizeRotatePdfRoute,
  OrganizeSplitPdfRoute: OrganizeSplitPdfRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
